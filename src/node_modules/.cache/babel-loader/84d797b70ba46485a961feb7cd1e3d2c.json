{"ast":null,"code":"var _jsxFileName = \"/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftMarket.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\nimport { PropTypes } from 'react';\nimport Web3 from 'web3';\nimport ChainlinkElf from \"./abis/ChainlinkElf.json\";\nimport ChainlinkOrc from \"./abis/ChainlinkOrc.json\";\nimport ChainlinkKnight from \"./abis/ChainlinkKnight.json\";\nimport Auction from \"./Auction\";\nimport Navbar from \"./Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass NftMarket extends Component {\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const networkId = await web3.eth.net.getId();\n    const address = localStorage.getItem('addresss');\n    this.setState({\n      userAccount: address\n    });\n    const account1 = \"\";\n    const account2 = \"\";\n    const account3 = \"\"; // Load Nft Contracts\n\n    if (this.state.userAccount == account1) {\n      const chainlinkelf = ChainlinkElf.networks[networkId];\n      const chainlinkorc = ChainlinkOrc.networks[networkId];\n      const chainlinkknight = ChainlinkKnight.networks[networkId];\n\n      if (chainlinkelf && chainlinkorc && chainlinkknight) {\n        const cle = new web3.eth.Contract(ChainlinkElf.abi, chainlinkelf.address);\n        const clo = new web3.eth.Contract(ChainlinkOrc.abi, chainlinkorc.address);\n        const clk = new web3.eth.Contract(ChainlinkKnight.abi, chainlinkknight.address);\n        let cleURI = await cle.methods.tokenURI(1).call();\n        this.setState({\n          cleURI\n        });\n        let cloURI = await clo.methods.tokenURI(1).call();\n        this.setState({\n          cloURI\n        });\n        let clkURI = await clk.methods.tokenURI(1).call();\n        this.setState({\n          clkURI\n        });\n        const cleResponse = await fetch(cleURI);\n        const cloResponse = await fetch(cloURI);\n        const clkResponse = await fetch(clkURI);\n        if (!cleResponse.ok && !cloResponse.ok && !clkResponse.ok) throw new Error(response.statusText);\n        const cleJson = await cleResponse.json();\n        this.setState({\n          cleName: cleJson.name\n        });\n        this.setState({\n          cleDescription: cleJson.description\n        });\n        this.setState({\n          cleImage: cleJson.image\n        });\n        const cloJson = await cloResponse.json();\n        this.setState({\n          cloName: cloJson.name\n        });\n        this.setState({\n          cloDescription: cloJson.description\n        });\n        this.setState({\n          cloImage: cloJson.image\n        });\n        const clkJson = await clkResponse.json();\n        this.setState({\n          clkName: clkJson.name\n        });\n        this.setState({\n          clkDescription: clkJson.description\n        });\n        this.setState({\n          clkImage: clkJson.image\n        });\n      } else {\n        window.alert('Nft contracts not deployed to detected network');\n      }\n    } else if (this.state.userAccount == \"\") {} else if (this.state.userAccount == \"\") {}\n\n    this.setState({\n      loading: false\n    });\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected.');\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAccount: '0x0',\n      cleUri: '',\n      cleName: '',\n      cloName: '',\n      clkName: '',\n      cleImage: {},\n      cloImage: {},\n      clkImage: {},\n      cleDescription: '',\n      cloDescription: '',\n      clkDescription: '',\n      loading: true\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Navbar, {\n        address: this.state.userAccount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default NftMarket;","map":{"version":3,"sources":["/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftMarket.js"],"names":["React","Component","BrowserRouter","Router","Route","Switch","Link","Redirect","PropTypes","Web3","ChainlinkElf","ChainlinkOrc","ChainlinkKnight","Auction","Navbar","NftMarket","componentDidMount","loadWeb3","loadBlockchainData","web3","window","networkId","eth","net","getId","address","localStorage","getItem","setState","userAccount","account1","account2","account3","state","chainlinkelf","networks","chainlinkorc","chainlinkknight","cle","Contract","abi","clo","clk","cleURI","methods","tokenURI","call","cloURI","clkURI","cleResponse","fetch","cloResponse","clkResponse","ok","Error","response","statusText","cleJson","json","cleName","name","cleDescription","description","cleImage","image","cloJson","cloName","cloDescription","cloImage","clkJson","clkName","clkDescription","clkImage","alert","loading","ethereum","enable","currentProvider","constructor","props","cleUri","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom'\nimport { PropTypes } from 'react'\nimport Web3 from 'web3'\nimport ChainlinkElf from \"./abis/ChainlinkElf.json\"\nimport ChainlinkOrc from \"./abis/ChainlinkOrc.json\"\nimport ChainlinkKnight from \"./abis/ChainlinkKnight.json\"\nimport Auction from \"./Auction\"\nimport Navbar from \"./Navbar\"\n\nclass NftMarket extends Component {\n\n  async componentDidMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    const networkId = await web3.eth.net.getId()\n    \n    const address = localStorage.getItem('addresss');\n    this.setState({userAccount:address});\n\n    const account1 = \"\";\n    const account2 = \"\";\n    const account3 = \"\";\n\n    // Load Nft Contracts\n    \n    if (this.state.userAccount == account1) {\n      const chainlinkelf = ChainlinkElf.networks[networkId]\n      const chainlinkorc = ChainlinkOrc.networks[networkId]\n      const chainlinkknight = ChainlinkKnight.networks[networkId]\n\n      if (chainlinkelf && chainlinkorc && chainlinkknight) {\n\n        const cle = new web3.eth.Contract(ChainlinkElf.abi, chainlinkelf.address)\n        const clo = new web3.eth.Contract(ChainlinkOrc.abi, chainlinkorc.address)\n        const clk = new web3.eth.Contract(ChainlinkKnight.abi, chainlinkknight.address)\n\n        let cleURI = await cle.methods.tokenURI(1).call()\n        this.setState({ cleURI })\n        let cloURI = await clo.methods.tokenURI(1).call()\n        this.setState({ cloURI })\n        let clkURI = await clk.methods.tokenURI(1).call()\n        this.setState({ clkURI })\n\n        const cleResponse = await fetch(cleURI);\n        const cloResponse = await fetch(cloURI);\n        const clkResponse = await fetch(clkURI);\n\n        if (!cleResponse.ok && !cloResponse.ok && !clkResponse.ok)\n          throw new Error(response.statusText);\n\n        const cleJson = await cleResponse.json();\n        this.setState({ cleName: cleJson.name })\n        this.setState({ cleDescription: cleJson.description })\n        this.setState({ cleImage: cleJson.image })\n\n        const cloJson = await cloResponse.json();\n        this.setState({ cloName: cloJson.name })\n        this.setState({ cloDescription: cloJson.description })\n        this.setState({ cloImage: cloJson.image })\n\n        const clkJson = await clkResponse.json();\n        this.setState({ clkName: clkJson.name })\n        this.setState({ clkDescription: clkJson.description })\n        this.setState({ clkImage: clkJson.image })\n\n      } else {\n        window.alert('Nft contracts not deployed to detected network')\n      }\n\n    } else if (this.state.userAccount == \"\") {\n\n    } else if (this.state.userAccount == \"\") {\n\n    }\n\n    this.setState({ loading: false })\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected.')\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAccount: '0x0',\n      cleUri: '',\n      cleName: '',\n      cloName: '',\n      clkName: '',\n      cleImage: {},\n      cloImage: {},\n      clkImage: {},\n      cleDescription: '',\n      cloDescription: '',\n      clkDescription: '',\n      loading: true\n    }\n  }\n\n  render() {\n    return (\n      <>\n      <Navbar address={this.state.userAccount} />\n      </>\n    );\n  }\n}\n\nexport default NftMarket;"]},"metadata":{},"sourceType":"module"}