{"ast":null,"code":"var _jsxFileName = \"/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftMarket.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\nimport { PropTypes } from 'react';\nimport Web3 from 'web3';\nimport ChainlinkElf from \"./abis/ChainlinkElf.json\";\nimport ChainlinkOrc from \"./abis/ChainlinkOrc.json\";\nimport ChainlinkKnight from \"./abis/ChainlinkKnight.json\";\nimport Navbar from \"./Navbar\";\nimport Nft from \"./components/Nft\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass NftMarket extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAccount: '0x0',\n      metadata: [],\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const networkId = await web3.eth.net.getId();\n    const address = localStorage.getItem('addresss');\n    this.setState({\n      userAccount: address\n    });\n    const account1 = \"0x138cd0dF5B11Bf9dda23f04231Bb23db225C6dC3\";\n    const account2 = \"0x4E2E2c34d3118aCc809aD2388D4A551627d0c88c\";\n    const account3 = \"0xCB36091327e0150c7f4D3E5e690C04CAd1C9a768\"; // Load Nft Contracts\n\n    if (this.state.userAccount == account1) {\n      const chainlinkelf = ChainlinkElf.networks[networkId];\n      const chainlinkorc = ChainlinkOrc.networks[networkId];\n      const chainlinkknight = ChainlinkKnight.networks[networkId];\n\n      if (chainlinkelf && chainlinkorc && chainlinkknight) {\n        const cle = new web3.eth.Contract(ChainlinkElf.abi, chainlinkelf.address);\n        const clo = new web3.eth.Contract(ChainlinkOrc.abi, chainlinkorc.address);\n        const clk = new web3.eth.Contract(ChainlinkKnight.abi, chainlinkknight.address);\n        let cleURI = await cle.methods.tokenURI(1).call();\n        let cloURI = await clo.methods.tokenURI(1).call();\n        let clkURI = await clk.methods.tokenURI(1).call();\n        const cleResponse = await fetch(cleURI);\n        const cloResponse = await fetch(cloURI);\n        const clkResponse = await fetch(clkURI);\n        if (!cleResponse.ok && !cloResponse.ok && !clkResponse.ok) throw new Error(response.statusText);\n        const cleJson = await cleResponse.json();\n        this.state.metadata.push({\n          id: 0,\n          name: cleJson.name,\n          description: cleJson.description,\n          image: cleJson.image\n        });\n        const cloJson = await cloResponse.json();\n        this.state.metadata.push({\n          id: 0,\n          name: cloJson.name,\n          description: cloJson.description,\n          image: cloJson.image\n        });\n        const clkJson = await clkResponse.json();\n        this.state.metadata.push({\n          id: 0,\n          name: clkJson.name,\n          description: clkJson.description,\n          image: clkJson.image\n        });\n      } else {\n        window.alert('Nft contracts not deployed to detected network');\n      }\n    } else if (this.state.userAccount == account2) {} else if (this.state.userAccount == account3) {}\n\n    this.setState({\n      loading: false\n    });\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected.');\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        address: this.state.userAccount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: this.state.metadata.map(nft => /*#__PURE__*/_jsxDEV(Nft, {\n          name: nft.name,\n          description: nft.description,\n          image: nft.image\n        }, nft.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default NftMarket;","map":{"version":3,"sources":["/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftMarket.js"],"names":["React","Component","BrowserRouter","Router","Route","Switch","Link","Redirect","PropTypes","Web3","ChainlinkElf","ChainlinkOrc","ChainlinkKnight","Navbar","Nft","NftMarket","constructor","props","state","userAccount","metadata","loading","componentDidMount","loadWeb3","loadBlockchainData","web3","window","networkId","eth","net","getId","address","localStorage","getItem","setState","account1","account2","account3","chainlinkelf","networks","chainlinkorc","chainlinkknight","cle","Contract","abi","clo","clk","cleURI","methods","tokenURI","call","cloURI","clkURI","cleResponse","fetch","cloResponse","clkResponse","ok","Error","response","statusText","cleJson","json","push","id","name","description","image","cloJson","clkJson","alert","ethereum","enable","currentProvider","render","map","nft"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom'\nimport { PropTypes } from 'react'\nimport Web3 from 'web3'\nimport ChainlinkElf from \"./abis/ChainlinkElf.json\"\nimport ChainlinkOrc from \"./abis/ChainlinkOrc.json\"\nimport ChainlinkKnight from \"./abis/ChainlinkKnight.json\"\nimport Navbar from \"./Navbar\"\nimport Nft from \"./components/Nft\"\n\nclass NftMarket extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAccount: '0x0',\n      metadata: [],\n      loading: true\n    }\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    const networkId = await web3.eth.net.getId()\n\n    const address = localStorage.getItem('addresss');\n    this.setState({ userAccount: address });\n\n    const account1 = \"0x138cd0dF5B11Bf9dda23f04231Bb23db225C6dC3\";\n    const account2 = \"0x4E2E2c34d3118aCc809aD2388D4A551627d0c88c\";\n    const account3 = \"0xCB36091327e0150c7f4D3E5e690C04CAd1C9a768\";\n\n    // Load Nft Contracts\n\n    if (this.state.userAccount == account1) {\n      const chainlinkelf = ChainlinkElf.networks[networkId]\n      const chainlinkorc = ChainlinkOrc.networks[networkId]\n      const chainlinkknight = ChainlinkKnight.networks[networkId]\n\n      if (chainlinkelf && chainlinkorc && chainlinkknight) {\n\n        const cle = new web3.eth.Contract(ChainlinkElf.abi, chainlinkelf.address)\n        const clo = new web3.eth.Contract(ChainlinkOrc.abi, chainlinkorc.address)\n        const clk = new web3.eth.Contract(ChainlinkKnight.abi, chainlinkknight.address)\n\n        let cleURI = await cle.methods.tokenURI(1).call()\n        let cloURI = await clo.methods.tokenURI(1).call()\n        let clkURI = await clk.methods.tokenURI(1).call()\n\n        const cleResponse = await fetch(cleURI);\n        const cloResponse = await fetch(cloURI);\n        const clkResponse = await fetch(clkURI);\n\n        if (!cleResponse.ok && !cloResponse.ok && !clkResponse.ok)\n          throw new Error(response.statusText);\n\n        const cleJson = await cleResponse.json();\n        this.state.metadata.push({ id: 0, name: cleJson.name, description: cleJson.description, image: cleJson.image });\n\n        const cloJson = await cloResponse.json();\n        this.state.metadata.push({ id: 0, name: cloJson.name, description: cloJson.description, image: cloJson.image });\n\n        const clkJson = await clkResponse.json();\n        this.state.metadata.push({ id: 0, name: clkJson.name, description: clkJson.description, image: clkJson.image });\n\n      } else {\n        window.alert('Nft contracts not deployed to detected network')\n      }\n\n    } else if (this.state.userAccount == account2) {\n\n    } else if (this.state.userAccount == account3) {\n\n    }\n\n    this.setState({ loading: false })\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected.')\n    }\n  }\n\n  render() {\n    return (\n      <>\n        < Navbar address={this.state.userAccount} />\n        <div className=\"row\">\n          {this.state.metadata.map(nft => (\n            < Nft\n              key={nft.id}\n              name={nft.name}\n              description={nft.description}\n              image={nft.image}\n            />\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default NftMarket;"]},"metadata":{},"sourceType":"module"}