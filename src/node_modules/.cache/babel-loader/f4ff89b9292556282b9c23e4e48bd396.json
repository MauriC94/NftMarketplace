{"ast":null,"code":"var _jsxFileName = \"/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftList.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\nimport { PropTypes } from 'react';\nimport Web3 from 'web3';\nimport ChainlinkElf from \"./abis/ChainlinkElf.json\";\nimport ChainlinkOrc from \"./abis/ChainlinkOrc.json\";\nimport ChainlinkKnight from \"./abis/ChainlinkKnight.json\";\nimport Auction from \"./Auction\";\nimport Navbar from \"./Navbar\";\nimport Login from './Login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass NftList extends Component {\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3; //const networkId = await web3.eth.net.getId()\n    //const accounts = await web3.eth.getAccounts()\n\n    const account1 = \"0x138cd0dF5B11Bf9dda23f04231Bb23db225C6dC3\"; // Load Nft Contracts\n\n    /*\n    if (this.state.userAccount == account1) {\n      const chainlinkelf = ChainlinkElf.networks[networkId]\n      const chainlinkorc = ChainlinkOrc.networks[networkId]\n      const chainlinkknight = ChainlinkKnight.networks[networkId]\n       if (chainlinkelf && chainlinkorc && chainlinkknight) {\n         const cle = new web3.eth.Contract(ChainlinkElf.abi, chainlinkelf.address)\n        const clo = new web3.eth.Contract(ChainlinkOrc.abi, chainlinkorc.address)\n        const clk = new web3.eth.Contract(ChainlinkKnight.abi, chainlinkknight.address)\n         let cleURI = await cle.methods.tokenURI(1).call()\n        this.setState({ cleURI })\n        let cloURI = await clo.methods.tokenURI(1).call()\n        this.setState({ cloURI })\n        let clkURI = await clk.methods.tokenURI(1).call()\n        this.setState({ clkURI })\n         const cleResponse = await fetch(cleURI);\n        const cloResponse = await fetch(cloURI);\n        const clkResponse = await fetch(clkURI);\n         if (!cleResponse.ok && !cloResponse.ok && !clkResponse.ok)\n          throw new Error(response.statusText);\n         const cleJson = await cleResponse.json();\n        this.setState({ cleName: cleJson.name })\n        this.setState({ cleDescription: cleJson.description })\n        this.setState({ cleImage: cleJson.image })\n         const cloJson = await cloResponse.json();\n        this.setState({ cloName: cloJson.name })\n        this.setState({ cloDescription: cloJson.description })\n        this.setState({ cloImage: cloJson.image })\n         const clkJson = await clkResponse.json();\n        this.setState({ clkName: clkJson.name })\n        this.setState({ clkDescription: clkJson.description })\n        this.setState({ clkImage: clkJson.image })\n       } else {\n        window.alert('Nft contracts not deployed to detected network')\n      }\n     } else if (this.state.userAccount == \"\") {\n     } else if (this.state.userAccount == \"\") {\n     }*/\n\n    this.setState({\n      loading: false\n    });\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected.');\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAccount: '0x0',\n      cleUri: '',\n      cleName: '',\n      cloName: '',\n      clkName: '',\n      cleImage: {},\n      cloImage: {},\n      clkImage: {},\n      cleDescription: '',\n      cloDescription: '',\n      clkDescription: '',\n      loading: true\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Navbar, {\n        address: this.state.userAccount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default NftList;","map":{"version":3,"sources":["/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftList.js"],"names":["React","Component","BrowserRouter","Router","Route","Switch","Link","Redirect","PropTypes","Web3","ChainlinkElf","ChainlinkOrc","ChainlinkKnight","Auction","Navbar","Login","NftList","componentDidMount","loadWeb3","loadBlockchainData","web3","window","account1","setState","loading","ethereum","enable","currentProvider","alert","constructor","props","state","userAccount","cleUri","cleName","cloName","clkName","cleImage","cloImage","clkImage","cleDescription","cloDescription","clkDescription","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,EAAiDC,IAAjD,EAAuDC,QAAvD,QAAuE,kBAAvE;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;;AAEA,MAAMC,OAAN,SAAsBf,SAAtB,CAAgC;AAEP,QAAjBgB,iBAAiB,GAAG;AACxB,UAAM,KAAKC,QAAL,EAAN;AACA,UAAM,KAAKC,kBAAL,EAAN;AACD;;AAEuB,QAAlBA,kBAAkB,GAAG;AACzB,UAAMC,IAAI,GAAGC,MAAM,CAACD,IAApB,CADyB,CAEzB;AACA;;AAEA,UAAME,QAAQ,GAAG,4CAAjB,CALyB,CAOzB;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaI,SAAKC,QAAL,CAAc;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAd;AACD;;AAEa,QAARN,QAAQ,GAAG;AACf,QAAIG,MAAM,CAACI,QAAX,EAAqB;AACnBJ,MAAAA,MAAM,CAACD,IAAP,GAAc,IAAIX,IAAJ,CAASY,MAAM,CAACI,QAAhB,CAAd;AACA,YAAMJ,MAAM,CAACI,QAAP,CAAgBC,MAAhB,EAAN;AACD,KAHD,MAIK,IAAIL,MAAM,CAACD,IAAX,EAAiB;AACpBC,MAAAA,MAAM,CAACD,IAAP,GAAc,IAAIX,IAAJ,CAASY,MAAM,CAACD,IAAP,CAAYO,eAArB,CAAd;AACD,KAFI,MAGA;AACHN,MAAAA,MAAM,CAACO,KAAP,CAAa,gCAAb;AACD;AACF;;AAEDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,KADF;AAEXC,MAAAA,MAAM,EAAE,EAFG;AAGXC,MAAAA,OAAO,EAAE,EAHE;AAIXC,MAAAA,OAAO,EAAE,EAJE;AAKXC,MAAAA,OAAO,EAAE,EALE;AAMXC,MAAAA,QAAQ,EAAE,EANC;AAOXC,MAAAA,QAAQ,EAAE,EAPC;AAQXC,MAAAA,QAAQ,EAAE,EARC;AASXC,MAAAA,cAAc,EAAE,EATL;AAUXC,MAAAA,cAAc,EAAE,EAVL;AAWXC,MAAAA,cAAc,EAAE,EAXL;AAYXlB,MAAAA,OAAO,EAAE;AAZE,KAAb;AAcD;;AAEDmB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACA,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKZ,KAAL,CAAWC;AAA5B;AAAA;AAAA;AAAA;AAAA;AADA,qBADF;AAKD;;AAzG6B;;AA4GhC,eAAehB,OAAf","sourcesContent":["import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom'\nimport { PropTypes } from 'react'\nimport Web3 from 'web3'\nimport ChainlinkElf from \"./abis/ChainlinkElf.json\"\nimport ChainlinkOrc from \"./abis/ChainlinkOrc.json\"\nimport ChainlinkKnight from \"./abis/ChainlinkKnight.json\"\nimport Auction from \"./Auction\"\nimport Navbar from \"./Navbar\"\nimport Login from './Login'\n\nclass NftList extends Component {\n\n  async componentDidMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    //const networkId = await web3.eth.net.getId()\n    //const accounts = await web3.eth.getAccounts()\n\n    const account1 = \"0x138cd0dF5B11Bf9dda23f04231Bb23db225C6dC3\";\n\n    // Load Nft Contracts\n    /*\n    if (this.state.userAccount == account1) {\n      const chainlinkelf = ChainlinkElf.networks[networkId]\n      const chainlinkorc = ChainlinkOrc.networks[networkId]\n      const chainlinkknight = ChainlinkKnight.networks[networkId]\n\n      if (chainlinkelf && chainlinkorc && chainlinkknight) {\n\n        const cle = new web3.eth.Contract(ChainlinkElf.abi, chainlinkelf.address)\n        const clo = new web3.eth.Contract(ChainlinkOrc.abi, chainlinkorc.address)\n        const clk = new web3.eth.Contract(ChainlinkKnight.abi, chainlinkknight.address)\n\n        let cleURI = await cle.methods.tokenURI(1).call()\n        this.setState({ cleURI })\n        let cloURI = await clo.methods.tokenURI(1).call()\n        this.setState({ cloURI })\n        let clkURI = await clk.methods.tokenURI(1).call()\n        this.setState({ clkURI })\n\n        const cleResponse = await fetch(cleURI);\n        const cloResponse = await fetch(cloURI);\n        const clkResponse = await fetch(clkURI);\n\n        if (!cleResponse.ok && !cloResponse.ok && !clkResponse.ok)\n          throw new Error(response.statusText);\n\n        const cleJson = await cleResponse.json();\n        this.setState({ cleName: cleJson.name })\n        this.setState({ cleDescription: cleJson.description })\n        this.setState({ cleImage: cleJson.image })\n\n        const cloJson = await cloResponse.json();\n        this.setState({ cloName: cloJson.name })\n        this.setState({ cloDescription: cloJson.description })\n        this.setState({ cloImage: cloJson.image })\n\n        const clkJson = await clkResponse.json();\n        this.setState({ clkName: clkJson.name })\n        this.setState({ clkDescription: clkJson.description })\n        this.setState({ clkImage: clkJson.image })\n\n      } else {\n        window.alert('Nft contracts not deployed to detected network')\n      }\n\n    } else if (this.state.userAccount == \"\") {\n\n    } else if (this.state.userAccount == \"\") {\n\n    }*/\n    this.setState({ loading: false })\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected.')\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAccount: '0x0',\n      cleUri: '',\n      cleName: '',\n      cloName: '',\n      clkName: '',\n      cleImage: {},\n      cloImage: {},\n      clkImage: {},\n      cleDescription: '',\n      cloDescription: '',\n      clkDescription: '',\n      loading: true\n    }\n  }\n\n  render() {\n    return (\n      <>\n      <Navbar address={this.state.userAccount} />\n      </>\n    );\n  }\n}\n\nexport default NftList;"]},"metadata":{},"sourceType":"module"}