{"ast":null,"code":"var _jsxFileName = \"/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftList.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Collectible from '../src/abis/Collectible.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NftList extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const networkId = await web3.eth.net.getId(); // Load Collectible\n\n    const erc721 = Collectible.networks[networkId];\n\n    if (erc721) {\n      const collectible = new web3.eth.Contract(Collectible.abi, erc721.address);\n      let URI = await collectible.methods.tokenURI(1).call();\n      console.log(URI);\n      const response = await fetch(URI);\n\n      const getURL = collectible => async i => {\n        let myContract = await collectible;\n\n        try {\n          let val = await myContract.methods.tokenURI(i).call({\n            from: get(selectedAccount)\n          });\n          let url = await ipfs_url_from_hash(val);\n          let res = await axios.get(url);\n          let desc = await res.data.properties.image.description;\n          let ret = (await \"https://ipfs.io/ipfs/\") + desc;\n          return ret;\n        } catch (err) {\n          console.warn(\"Error: \" + err);\n        }\n      };\n\n      if (!response.ok) throw new Error(response.statusText);\n      const json = await response.json();\n      this.setState({\n        name: json.name\n      });\n      this.setState({\n        image: json.image\n      });\n      this.setState({\n        description: json.description\n      });\n    } else {\n      window.alert('NftMarket contract not deployed to detected network');\n    }\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected.');\n    }\n  }\n\n  async listTokensOfOwner({\n    token: tokenAddress,\n    account\n  }) {\n    const token = new web3.eth.Contract(ERC721.abi, tokenAddress, ethers.provider);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: {},\n      description: '',\n      nft: [],\n      loading: true\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        class: \"mb-5\",\n        children: \" Owned ERC721 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b-row\", {\n        \"v-if\": \"nft.length == 0\",\n        children: /*#__PURE__*/_jsxDEV(\"b-col\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"No ERC721 owned yet!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default NftList;","map":{"version":3,"sources":["/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftList.js"],"names":["React","Component","Web3","Collectible","NftList","componentWillMount","loadWeb3","loadBlockchainData","web3","window","networkId","eth","net","getId","erc721","networks","collectible","Contract","abi","address","URI","methods","tokenURI","call","console","log","response","fetch","getURL","i","myContract","val","from","get","selectedAccount","url","ipfs_url_from_hash","res","axios","desc","data","properties","image","description","ret","err","warn","ok","Error","statusText","json","setState","name","alert","ethereum","enable","currentProvider","listTokensOfOwner","token","tokenAddress","account","ERC721","ethers","provider","constructor","props","state","nft","loading","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport Collectible from '../src/abis/Collectible.json'\n\nclass NftList extends Component {\n\n  async componentWillMount(){\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadBlockchainData(){\n    const web3 = window.web3\n    const networkId = await web3.eth.net.getId()\n\n    // Load Collectible\n    const erc721 = Collectible.networks[networkId]\n\n    if(erc721){\n        const collectible = new web3.eth.Contract(Collectible.abi, erc721.address)\n        let URI = await collectible.methods.tokenURI(1).call()\n        console.log(URI)\n        const response = await fetch(URI);\n\n        const getURL = (collectible) => async (i) => {\n          let myContract = await collectible;\n          try {\n              let val = await myContract.methods.tokenURI(i).call({from:get(selectedAccount)});\n              let url = await ipfs_url_from_hash(val);\n              let res = await axios.get(url);\n              let desc = await res.data.properties.image.description;\n              let ret = (await \"https://ipfs.io/ipfs/\") + desc;\n              return ret;\n          } catch (err) {\n              console.warn(\"Error: \" + err);\n          }\n      };\n\n        if(!response.ok)\n        throw new Error(response.statusText);\n\n        const json = await response.json();\n        this.setState({name: json.name})\n        this.setState({image: json.image})\n        this.setState({description: json.description})\n\n      }else{\n        window.alert('NftMarket contract not deployed to detected network')\n      }\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected.')\n    }\n  }\n\n  async listTokensOfOwner({ token: tokenAddress, account }) {\n    const token = new web3.eth.Contract(ERC721.abi, tokenAddress, ethers.provider);\n\n\n\n  };\n\n  constructor(props){\n    super(props)\n    this.state = {\n      image:{},\n      description:'',\n      nft:[],\n      loading: true\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"container\">\n        <h2 class=\"mb-5\"> Owned ERC721 </h2>\n        <b-row v-if=\"nft.length == 0\">\n          <b-col>\n            <h2>No ERC721 owned yet!</h2>\n          </b-col>\n        </b-row>\n      </div>\n    );\n  }\n}\n\nexport default NftList;"]},"metadata":{},"sourceType":"module"}