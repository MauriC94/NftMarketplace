{"ast":null,"code":"var _jsxFileName = \"/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftList.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\nimport { PropTypes } from 'react';\nimport Web3 from 'web3';\nimport ChainlinkElf from \"./abis/ChainlinkElf.json\";\nimport ChainlinkOrc from \"./abis/ChainlinkOrc.json\";\nimport ChainlinkKnight from \"./abis/ChainlinkKnight.json\";\nimport Auction from \"./Auction\";\nimport Navbar from \"./Navbar\";\nimport Login from './Login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NftList extends Component {\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n    this.setState({\n      account: '0x00'\n    });\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3; //const networkId = await web3.eth.net.getId()\n    //const accounts = await web3.eth.getAccounts()\n\n    const account1 = \"0x138cd0dF5B11Bf9dda23f04231Bb23db225C6dC3\"; // Load Nft Contracts\n\n    if (this.state.userAccount == account1) {\n      const chainlinkelf = ChainlinkElf.networks[networkId];\n      const chainlinkorc = ChainlinkOrc.networks[networkId];\n      const chainlinkknight = ChainlinkKnight.networks[networkId];\n\n      if (chainlinkelf && chainlinkorc && chainlinkknight) {\n        const cle = new web3.eth.Contract(ChainlinkElf.abi, chainlinkelf.address);\n        const clo = new web3.eth.Contract(ChainlinkOrc.abi, chainlinkorc.address);\n        const clk = new web3.eth.Contract(ChainlinkKnight.abi, chainlinkknight.address);\n        let cleURI = await cle.methods.tokenURI(1).call();\n        this.setState({\n          cleURI\n        });\n        let cloURI = await clo.methods.tokenURI(1).call();\n        this.setState({\n          cloURI\n        });\n        let clkURI = await clk.methods.tokenURI(1).call();\n        this.setState({\n          clkURI\n        });\n        const cleResponse = await fetch(cleURI);\n        const cloResponse = await fetch(cloURI);\n        const clkResponse = await fetch(clkURI);\n        if (!cleResponse.ok && !cloResponse.ok && !clkResponse.ok) throw new Error(response.statusText);\n        const cleJson = await cleResponse.json();\n        this.setState({\n          cleName: cleJson.name\n        });\n        this.setState({\n          cleDescription: cleJson.description\n        });\n        this.setState({\n          cleImage: cleJson.image\n        });\n        const cloJson = await cloResponse.json();\n        this.setState({\n          cloName: cloJson.name\n        });\n        this.setState({\n          cloDescription: cloJson.description\n        });\n        this.setState({\n          cloImage: cloJson.image\n        });\n        const clkJson = await clkResponse.json();\n        this.setState({\n          clkName: clkJson.name\n        });\n        this.setState({\n          clkDescription: clkJson.description\n        });\n        this.setState({\n          clkImage: clkJson.image\n        });\n      } else {\n        window.alert('Nft contracts not deployed to detected network');\n      }\n    } else if (this.state.userAccount == \"\") {} else if (this.state.userAccount == \"\") {}\n\n    this.setState({\n      loading: false\n    });\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected.');\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAccount: '0x0',\n      cleUri: '',\n      cleName: '',\n      cloName: '',\n      clkName: '',\n      cleImage: {},\n      cloImage: {},\n      clkImage: {},\n      cleDescription: '',\n      cloDescription: '',\n      clkDescription: '',\n      loading: true\n    };\n  }\n\n  render() {\n    let auctionForm;\n\n    if (this.state.loading) {\n      auctionForm = /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"loader\",\n        classname: \"text-center\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this);\n    } else {\n      auctionForm = /*#__PURE__*/_jsxDEV(Auction, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this);\n    }\n\n    let navbar = /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 18\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      children: [navbar, /*#__PURE__*/_jsxDEV(\"h2\", {\n        class: \"mb-5\",\n        children: \" Owned ERC721 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"row row-cols-1 row-cols-md-3 mb-3 text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card mb-4 rounded-3 shadow-sm\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"card-header py-3\",\n              children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                class: \"my-0 fw-normal\",\n                children: this.state.cleName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"card-body\",\n              children: /*#__PURE__*/_jsxDEV(\"ul\", {\n                class: \"list-unstyled mt-3 mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  children: this.state.cleDescription\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: this.state.cleImage,\n                  width: \"250\",\n                  height: \"250\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), auctionForm]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default NftList;","map":{"version":3,"sources":["/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftList.js"],"names":["React","Component","BrowserRouter","Router","Route","Switch","Link","Redirect","PropTypes","Web3","ChainlinkElf","ChainlinkOrc","ChainlinkKnight","Auction","Navbar","Login","NftList","componentDidMount","loadWeb3","loadBlockchainData","setState","account","web3","window","account1","state","userAccount","chainlinkelf","networks","networkId","chainlinkorc","chainlinkknight","cle","eth","Contract","abi","address","clo","clk","cleURI","methods","tokenURI","call","cloURI","clkURI","cleResponse","fetch","cloResponse","clkResponse","ok","Error","response","statusText","cleJson","json","cleName","name","cleDescription","description","cleImage","image","cloJson","cloName","cloDescription","cloImage","clkJson","clkName","clkDescription","clkImage","alert","loading","ethereum","enable","currentProvider","constructor","props","cleUri","render","auctionForm","navbar"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom'\nimport { PropTypes } from 'react'\nimport Web3 from 'web3'\nimport ChainlinkElf from \"./abis/ChainlinkElf.json\"\nimport ChainlinkOrc from \"./abis/ChainlinkOrc.json\"\nimport ChainlinkKnight from \"./abis/ChainlinkKnight.json\"\nimport Auction from \"./Auction\"\nimport Navbar from \"./Navbar\"\nimport Login from './Login'\n\nclass NftList extends Component {\n\n  async componentDidMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n    this.setState({account: '0x00'})\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    //const networkId = await web3.eth.net.getId()\n    //const accounts = await web3.eth.getAccounts()\n\n    const account1 = \"0x138cd0dF5B11Bf9dda23f04231Bb23db225C6dC3\";\n\n    // Load Nft Contracts\n    if (this.state.userAccount == account1) {\n      const chainlinkelf = ChainlinkElf.networks[networkId]\n      const chainlinkorc = ChainlinkOrc.networks[networkId]\n      const chainlinkknight = ChainlinkKnight.networks[networkId]\n\n      if (chainlinkelf && chainlinkorc && chainlinkknight) {\n\n        const cle = new web3.eth.Contract(ChainlinkElf.abi, chainlinkelf.address)\n        const clo = new web3.eth.Contract(ChainlinkOrc.abi, chainlinkorc.address)\n        const clk = new web3.eth.Contract(ChainlinkKnight.abi, chainlinkknight.address)\n\n        let cleURI = await cle.methods.tokenURI(1).call()\n        this.setState({ cleURI })\n        let cloURI = await clo.methods.tokenURI(1).call()\n        this.setState({ cloURI })\n        let clkURI = await clk.methods.tokenURI(1).call()\n        this.setState({ clkURI })\n\n        const cleResponse = await fetch(cleURI);\n        const cloResponse = await fetch(cloURI);\n        const clkResponse = await fetch(clkURI);\n\n        if (!cleResponse.ok && !cloResponse.ok && !clkResponse.ok)\n          throw new Error(response.statusText);\n\n        const cleJson = await cleResponse.json();\n        this.setState({ cleName: cleJson.name })\n        this.setState({ cleDescription: cleJson.description })\n        this.setState({ cleImage: cleJson.image })\n\n        const cloJson = await cloResponse.json();\n        this.setState({ cloName: cloJson.name })\n        this.setState({ cloDescription: cloJson.description })\n        this.setState({ cloImage: cloJson.image })\n\n        const clkJson = await clkResponse.json();\n        this.setState({ clkName: clkJson.name })\n        this.setState({ clkDescription: clkJson.description })\n        this.setState({ clkImage: clkJson.image })\n\n      } else {\n        window.alert('Nft contracts not deployed to detected network')\n      }\n\n    } else if (this.state.userAccount == \"\") {\n\n    } else if (this.state.userAccount == \"\") {\n\n    }\n    this.setState({ loading: false })\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected.')\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAccount: '0x0',\n      cleUri: '',\n      cleName: '',\n      cloName: '',\n      clkName: '',\n      cleImage: {},\n      cloImage: {},\n      clkImage: {},\n      cleDescription: '',\n      cloDescription: '',\n      clkDescription: '',\n      loading: true\n    }\n  }\n\n  render() {\n    let auctionForm\n    if (this.state.loading) {\n      auctionForm = <p id=\"loader\" classname=\"text-center\">Loading...</p>\n    } else {\n      auctionForm = <Auction />\n    }\n    let navbar = <Navbar/>\n    return (\n      <div class=\"container\">\n        {navbar}\n        <h2 class=\"mb-5\"> Owned ERC721 </h2>\n        <div class=\"row row-cols-1 row-cols-md-3 mb-3 text-center\">\n          <div class=\"col\">\n            <div class=\"card mb-4 rounded-3 shadow-sm\">\n              <div class=\"card-header py-3\">\n                <h4 class=\"my-0 fw-normal\">{this.state.cleName}</h4>\n              </div>\n              <div class=\"card-body\">\n                <ul class=\"list-unstyled mt-3 mb-4\">\n                  <li>{this.state.cleDescription}</li>\n                  <img src={this.state.cleImage} width=\"250\" height=\"250\"></img>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n        {auctionForm}\n      </div>\n    );\n  }\n}\n\nexport default NftList;"]},"metadata":{},"sourceType":"module"}