{"ast":null,"code":"var _jsxFileName = \"/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftMarket.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\nimport { PropTypes } from 'react';\nimport Web3 from 'web3';\nimport ChainlinkElf from \"./abis/ChainlinkElf.json\";\nimport ChainlinkOrc from \"./abis/ChainlinkOrc.json\";\nimport ChainlinkKnight from \"./abis/ChainlinkKnight.json\";\nimport Auction from \"./Auction\";\nimport Navbar from \"./Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass NftMarket extends Component {\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const networkId = await web3.eth.net.getId();\n    const address = localStorage.getItem('addresss');\n    this.setState({\n      userAccount: address\n    });\n    const account1 = \"0x138cd0dF5B11Bf9dda23f04231Bb23db225C6dC3\";\n    const account2 = \"0x4E2E2c34d3118aCc809aD2388D4A551627d0c88c\";\n    const account3 = \"0xCB36091327e0150c7f4D3E5e690C04CAd1C9a768\"; // Load Nft Contracts\n\n    if (this.state.userAccount == account1) {\n      const chainlinkelf = ChainlinkElf.networks[networkId];\n      const chainlinkorc = ChainlinkOrc.networks[networkId];\n      const chainlinkknight = ChainlinkKnight.networks[networkId];\n\n      if (chainlinkelf && chainlinkorc && chainlinkknight) {\n        const cle = new web3.eth.Contract(ChainlinkElf.abi, chainlinkelf.address);\n        const clo = new web3.eth.Contract(ChainlinkOrc.abi, chainlinkorc.address);\n        const clk = new web3.eth.Contract(ChainlinkKnight.abi, chainlinkknight.address);\n        let cleURI = await cle.methods.tokenURI(1).call(); //this.setState({ cleURI })\n\n        let cloURI = await clo.methods.tokenURI(1).call(); //this.setState({ cloURI })\n\n        let clkURI = await clk.methods.tokenURI(1).call(); //this.setState({ clkURI })\n\n        const cleResponse = await fetch(cleURI);\n        const cloResponse = await fetch(cloURI);\n        const clkResponse = await fetch(clkURI);\n        if (!cleResponse.ok && !cloResponse.ok && !clkResponse.ok) throw new Error(response.statusText);\n        const cleJson = await cleResponse.json();\n        this.state.metadata.push({\n          id: 0,\n          name: cleJson.name,\n          description: cleJson.description,\n          image: cleJson.image\n        });\n        const cloJson = await cloResponse.json();\n        this.state.metadata.push({\n          id: 0,\n          name: cloJson.name,\n          description: cloJson.description,\n          image: cloJson.image\n        });\n        const clkJson = await clkResponse.json();\n        this.state.metadata.push({\n          id: 0,\n          name: clkJson.name,\n          description: clkJson.description,\n          image: clkJson.image\n        });\n\n        for (i = 0; i < 3; i++) {\n          this.state.erc721.push({\n            id: i\n          });\n        }\n      } else {\n        window.alert('Nft contracts not deployed to detected network');\n      }\n    } else if (this.state.userAccount == account2) {} else if (this.state.userAccount == account3) {}\n\n    this.setState({\n      loading: false\n    });\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected.');\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAccount: '0x0',\n      cleUri: '',\n      cleName: '',\n      cloName: '',\n      clkName: '',\n      cleImage: {},\n      cloImage: {},\n      clkImage: {},\n      cleDescription: '',\n      cloDescription: '',\n      clkDescription: '',\n      erc721: [],\n      metadata: [],\n      loading: true\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Navbar, {\n        address: this.state.userAccount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default NftMarket;","map":{"version":3,"sources":["/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftMarket.js"],"names":["React","Component","BrowserRouter","Router","Route","Switch","Link","Redirect","PropTypes","Web3","ChainlinkElf","ChainlinkOrc","ChainlinkKnight","Auction","Navbar","NftMarket","componentDidMount","loadWeb3","loadBlockchainData","web3","window","networkId","eth","net","getId","address","localStorage","getItem","setState","userAccount","account1","account2","account3","state","chainlinkelf","networks","chainlinkorc","chainlinkknight","cle","Contract","abi","clo","clk","cleURI","methods","tokenURI","call","cloURI","clkURI","cleResponse","fetch","cloResponse","clkResponse","ok","Error","response","statusText","cleJson","json","metadata","push","id","name","description","image","cloJson","clkJson","i","erc721","alert","loading","ethereum","enable","currentProvider","constructor","props","cleUri","cleName","cloName","clkName","cleImage","cloImage","clkImage","cleDescription","cloDescription","clkDescription","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom'\nimport { PropTypes } from 'react'\nimport Web3 from 'web3'\nimport ChainlinkElf from \"./abis/ChainlinkElf.json\"\nimport ChainlinkOrc from \"./abis/ChainlinkOrc.json\"\nimport ChainlinkKnight from \"./abis/ChainlinkKnight.json\"\nimport Auction from \"./Auction\"\nimport Navbar from \"./Navbar\"\n\nclass NftMarket extends Component {\n\n  async componentDidMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    const networkId = await web3.eth.net.getId()\n    \n    const address = localStorage.getItem('addresss');\n    this.setState({userAccount:address});\n\n    const account1 = \"0x138cd0dF5B11Bf9dda23f04231Bb23db225C6dC3\";\n    const account2 = \"0x4E2E2c34d3118aCc809aD2388D4A551627d0c88c\";\n    const account3 = \"0xCB36091327e0150c7f4D3E5e690C04CAd1C9a768\";\n\n    // Load Nft Contracts\n    \n    if (this.state.userAccount == account1) {\n      const chainlinkelf = ChainlinkElf.networks[networkId]\n      const chainlinkorc = ChainlinkOrc.networks[networkId]\n      const chainlinkknight = ChainlinkKnight.networks[networkId]\n\n      if (chainlinkelf && chainlinkorc && chainlinkknight) {\n\n        const cle = new web3.eth.Contract(ChainlinkElf.abi, chainlinkelf.address)\n        const clo = new web3.eth.Contract(ChainlinkOrc.abi, chainlinkorc.address)\n        const clk = new web3.eth.Contract(ChainlinkKnight.abi, chainlinkknight.address)\n\n        let cleURI = await cle.methods.tokenURI(1).call()\n        //this.setState({ cleURI })\n        let cloURI = await clo.methods.tokenURI(1).call()\n        //this.setState({ cloURI })\n        let clkURI = await clk.methods.tokenURI(1).call()\n        //this.setState({ clkURI })\n\n        const cleResponse = await fetch(cleURI);\n        const cloResponse = await fetch(cloURI);\n        const clkResponse = await fetch(clkURI);\n\n        if (!cleResponse.ok && !cloResponse.ok && !clkResponse.ok)\n          throw new Error(response.statusText);\n\n        const cleJson = await cleResponse.json();\n        this.state.metadata.push({id:0,name:cleJson.name,description:cleJson.description,image:cleJson.image});\n\n        const cloJson = await cloResponse.json();\n        this.state.metadata.push({id:0,name:cloJson.name,description:cloJson.description,image:cloJson.image});\n\n        const clkJson = await clkResponse.json();\n        this.state.metadata.push({id:0,name:clkJson.name,description:clkJson.description,image:clkJson.image});\n\n        for(i=0; i<3; i++){\n          this.state.erc721.push({id:i, })\n        }\n\n      } else {\n        window.alert('Nft contracts not deployed to detected network')\n      }\n\n    } else if (this.state.userAccount == account2) {\n\n    } else if (this.state.userAccount == account3) {\n\n    }\n\n    this.setState({ loading: false })\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected.')\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAccount: '0x0',\n      cleUri: '',\n      cleName: '',\n      cloName: '',\n      clkName: '',\n      cleImage: {},\n      cloImage: {},\n      clkImage: {},\n      cleDescription: '',\n      cloDescription: '',\n      clkDescription: '',\n      erc721:[],\n      metadata:[],\n      loading: true\n    }\n  }\n\n  render() {\n    return (\n      <>\n      < Navbar address={this.state.userAccount} />\n      \n      </>\n    );\n  }\n}\n\nexport default NftMarket;"]},"metadata":{},"sourceType":"module"}