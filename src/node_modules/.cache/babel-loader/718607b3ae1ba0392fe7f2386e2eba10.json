{"ast":null,"code":"var _jsxFileName = \"/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftMarket.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\nimport { PropTypes } from 'react';\nimport Web3 from 'web3';\nimport Navbar from \"./Navbar\";\nimport Nft from \"./components/Nft\";\nimport Auction from \"./Auction\";\nimport HulkErc721 from './abis/HulkErc721.json';\nimport SupermanErc721 from './abis/SupermanErc721.json';\nimport DeadpoolErc721 from './abis/DeadpoolErc721.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass NftMarket extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nftAuction: '',\n      auctionPrice: '',\n      auctionDays: '',\n      auctionHours: '',\n      auctionMinutes: '',\n      userAccount: '0x0',\n      metadata: [],\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const networkId = await web3.eth.net.getId();\n    console.log(networkId);\n    const address = localStorage.getItem('address');\n    this.setState({\n      userAccount: address\n    });\n    console.log(this.state.userAccount);\n    const account1 = \"0x138cd0dF5B11Bf9dda23f04231Bb23db225C6dC3\";\n    const account2 = \"0x4E2E2c34d3118aCc809aD2388D4A551627d0c88c\";\n    const account3 = \"0xCB36091327e0150c7f4D3E5e690C04CAd1C9a768\"; // Load Nft Contracts\n\n    if (this.state.userAccount == account1) {\n      const superman = SupermanErc721.networks[networkId];\n      const hulk = HulkErc721.networks[networkId];\n      const deadpool = DeadpoolErc721.networks[networkId];\n\n      if (superman && hulk && deadpool) {\n        const sm = new web3.eth.Contract(SupermanErc721.abi, superman.address);\n        const hk = new web3.eth.Contract(HulkErc721.abi, hulk.address);\n        const dp = new web3.eth.Contract(DeadpoolErc721.abi, deadpool.address);\n        let smURI = await sm.methods.tokenURI(1).call();\n        let hkURI = await hk.methods.tokenURI(1).call();\n        let dpURI = await dp.methods.tokenURI(1).call();\n        const smResponse = await fetch(hkURI); //const hkResponse = await fetch(hkURI);\n        //const dpResponse = await fetch(dpURI);\n\n        console.log(\"ciao\");\n        if (!smResponse.ok) throw new Error(response.statusText);\n        const smJson = await smResponse.json();\n        this.state.metadata.push({\n          id: 0,\n          name: smJson.name,\n          description: smJson.description,\n          image: smJson.image\n        }); //const hkJson = await hkResponse.json();\n        //this.state.metadata.push({ id: 1, name: hkJson.name, description: hkJson.description, image: hkJson.image });\n        //const dpJson = await dpResponse.json();\n        //this.state.metadata.push({ id: 2, name: dpJson.name, description: dpJson.description, image: dpJson.image });\n      } else {\n        window.alert('Nft contracts not deployed to detected network');\n      }\n    } else if (this.state.userAccount == account2) {} else if (this.state.userAccount == account3) {}\n\n    this.setState({\n      loading: false\n    });\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected.');\n    }\n  }\n\n  handleNftChange(e) {\n    this.setState({\n      nftAuction: e.target.value\n    });\n  }\n\n  handleAuctionPrice(e) {\n    this.setState({\n      auctionPrice: e.target.value\n    });\n  }\n\n  handleDayAuction(e) {\n    this.setState({\n      auctionDays: e.target.value\n    });\n  }\n\n  handleHoursAuction(e) {\n    this.setState({\n      auctionHours: e.target.value\n    });\n  }\n\n  handleMinutesAuction(e) {\n    this.setState({\n      auctionMinutes: e.target.value\n    });\n  }\n\n  handleAuctionForm(e) {\n    e.preventDefault();\n  }\n\n  render() {\n    let content;\n\n    if (this.state.loading) {\n      content = /*#__PURE__*/_jsxDEV(\"h4\", {\n        id: \"loader\",\n        className: \"text-center\",\n        children: \"Loading ERC721 Token....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        address: this.state.userAccount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [content, this.state.metadata.map(nft => /*#__PURE__*/_jsxDEV(Nft, {\n          name: nft.name,\n          description: nft.description,\n          image: nft.image\n        }, nft.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default NftMarket;","map":{"version":3,"sources":["/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftMarket.js"],"names":["React","Component","BrowserRouter","Router","Route","Switch","Link","Redirect","PropTypes","Web3","Navbar","Nft","Auction","HulkErc721","SupermanErc721","DeadpoolErc721","NftMarket","constructor","props","state","nftAuction","auctionPrice","auctionDays","auctionHours","auctionMinutes","userAccount","metadata","loading","componentDidMount","loadWeb3","loadBlockchainData","web3","window","networkId","eth","net","getId","console","log","address","localStorage","getItem","setState","account1","account2","account3","superman","networks","hulk","deadpool","sm","Contract","abi","hk","dp","smURI","methods","tokenURI","call","hkURI","dpURI","smResponse","fetch","ok","Error","response","statusText","smJson","json","push","id","name","description","image","alert","ethereum","enable","currentProvider","handleNftChange","e","target","value","handleAuctionPrice","handleDayAuction","handleHoursAuction","handleMinutesAuction","handleAuctionForm","preventDefault","render","content","map","nft"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom'\nimport { PropTypes } from 'react'\nimport Web3 from 'web3'\nimport Navbar from \"./Navbar\"\nimport Nft from \"./components/Nft\"\nimport Auction from \"./Auction\"\n\nimport HulkErc721 from './abis/HulkErc721.json'\nimport SupermanErc721 from './abis/SupermanErc721.json'\nimport DeadpoolErc721 from './abis/DeadpoolErc721.json'\n\nclass NftMarket extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      nftAuction: '',\n      auctionPrice: '',\n      auctionDays: '',\n      auctionHours: '',\n      auctionMinutes: '',\n      userAccount: '0x0',\n      metadata: [],\n      loading: true\n    }\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    const networkId = await web3.eth.net.getId()\n    console.log(networkId)\n\n    const address = localStorage.getItem('address');\n    this.setState({ userAccount: address });\n    console.log(this.state.userAccount)\n\n    const account1 = \"0x138cd0dF5B11Bf9dda23f04231Bb23db225C6dC3\";\n    const account2 = \"0x4E2E2c34d3118aCc809aD2388D4A551627d0c88c\";\n    const account3 = \"0xCB36091327e0150c7f4D3E5e690C04CAd1C9a768\";\n\n    // Load Nft Contracts\n\n    if (this.state.userAccount == account1) {\n      const superman = SupermanErc721.networks[networkId]\n      const hulk = HulkErc721.networks[networkId]\n      const deadpool = DeadpoolErc721.networks[networkId]\n\n      if (superman && hulk && deadpool) {\n\n        const sm = new web3.eth.Contract(SupermanErc721.abi, superman.address)\n        const hk = new web3.eth.Contract(HulkErc721.abi, hulk.address)\n        const dp = new web3.eth.Contract(DeadpoolErc721.abi, deadpool.address)\n\n        let smURI = await sm.methods.tokenURI(1).call()\n        let hkURI = await hk.methods.tokenURI(1).call()\n        let dpURI = await dp.methods.tokenURI(1).call()\n\n        const smResponse = await fetch(hkURI);\n        //const hkResponse = await fetch(hkURI);\n        //const dpResponse = await fetch(dpURI);\n        console.log(\"ciao\")\n\n        if (!smResponse.ok)\n          throw new Error(response.statusText);\n\n\n        const smJson = await smResponse.json();\n        this.state.metadata.push({ id: 0, name: smJson.name, description: smJson.description, image: smJson.image });\n\n        //const hkJson = await hkResponse.json();\n        //this.state.metadata.push({ id: 1, name: hkJson.name, description: hkJson.description, image: hkJson.image });\n\n        //const dpJson = await dpResponse.json();\n        //this.state.metadata.push({ id: 2, name: dpJson.name, description: dpJson.description, image: dpJson.image });\n\n\n      } else {\n        window.alert('Nft contracts not deployed to detected network')\n      }\n\n    } else if (this.state.userAccount == account2) {\n\n    } else if (this.state.userAccount == account3) {\n\n    }\n\n    this.setState({ loading: false })\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected.')\n    }\n  }\n\n  handleNftChange(e) {\n    this.setState({ nftAuction: e.target.value });\n  }\n\n  handleAuctionPrice(e) {\n    this.setState({ auctionPrice: e.target.value });\n  }\n\n  handleDayAuction(e) {\n    this.setState({ auctionDays: e.target.value });\n  }\n\n  handleHoursAuction(e) {\n    this.setState({ auctionHours: e.target.value });\n  }\n\n  handleMinutesAuction(e) {\n    this.setState({ auctionMinutes: e.target.value });\n  }\n\n  handleAuctionForm(e) {\n    e.preventDefault();\n\n  }\n\n  render() {\n    let content\n    if (this.state.loading) {\n      content = <h4 id=\"loader\" className=\"text-center\">Loading ERC721 Token....</h4>\n    }\n    return (\n      <>\n        < Navbar address={this.state.userAccount} />\n        <div className=\"row\">\n          {content}\n          {this.state.metadata.map(nft => (\n            < Nft\n              key={nft.id}\n              name={nft.name}\n              description={nft.description}\n              image={nft.image}\n            />\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default NftMarket;"]},"metadata":{},"sourceType":"module"}