{"ast":null,"code":"var _jsxFileName = \"/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftMarket.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\nimport { PropTypes } from 'react';\nimport Web3 from 'web3';\nimport ChainlinkElf from \"./abis/ChainlinkElf.json\";\nimport ChainlinkOrc from \"./abis/ChainlinkOrc.json\";\nimport ChainlinkKnight from \"./abis/ChainlinkKnight.json\";\nimport Navbar from \"./Navbar\";\nimport Nft from \"./components/Nft\";\nimport Auction from \"./Auction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass NftMarket extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nftAuction: '',\n      auctionPrice: '',\n      auctionDays: '',\n      auctionHours: '',\n      auctionMinutes: '',\n      userAccount: '0x0',\n      metadata: [],\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const networkId = await web3.eth.net.getId();\n    console.log(networkId);\n    const address = localStorage.getItem('address');\n    this.setState({\n      userAccount: address\n    });\n    console.log(this.state.userAccount);\n    const account1 = \"0x138cd0dF5B11Bf9dda23f04231Bb23db225C6dC3\";\n    const account2 = \"0x4E2E2c34d3118aCc809aD2388D4A551627d0c88c\";\n    const account3 = \"0xCB36091327e0150c7f4D3E5e690C04CAd1C9a768\"; // Load Nft Contracts\n\n    if (this.state.userAccount == account1) {\n      const superman = SupermanErc721.networks[networkId];\n      const hulk = HulkErc721.networks[networkId];\n      const deadpool = DeadpoolErc721.networks[networkId];\n\n      if (superman && hulk && chainlinkknight) {\n        const cle = new web3.eth.Contract(ChainlinkElf.abi, superman.address);\n        const clo = new web3.eth.Contract(ChainlinkOrc.abi, chainlinkorc.address);\n        const clk = new web3.eth.Contract(ChainlinkKnight.abi, chainlinkknight.address);\n        let cleURI = await cle.methods.tokenURI(1).call();\n        let cloURI = await clo.methods.tokenURI(1).call();\n        let clkURI = await clk.methods.tokenURI(1).call();\n        const cleResponse = await fetch(cleURI);\n        const cloResponse = await fetch(cloURI);\n        const clkResponse = await fetch(clkURI);\n        if (!cleResponse.ok && !cloResponse.ok && !clkResponse.ok) throw new Error(response.statusText);\n        const cleJson = await cleResponse.json();\n        this.state.metadata.push({\n          id: 0,\n          name: cleJson.name,\n          description: cleJson.description,\n          image: cleJson.image\n        });\n        const cloJson = await cloResponse.json();\n        this.state.metadata.push({\n          id: 1,\n          name: cloJson.name,\n          description: cloJson.description,\n          image: cloJson.image\n        });\n        const clkJson = await clkResponse.json();\n        this.state.metadata.push({\n          id: 2,\n          name: clkJson.name,\n          description: clkJson.description,\n          image: clkJson.image\n        });\n        console.log(this.state.metadata.lastIndex);\n      } else {\n        window.alert('Nft contracts not deployed to detected network');\n      }\n    } else if (this.state.userAccount == account2) {} else if (this.state.userAccount == account3) {}\n\n    this.setState({\n      loading: false\n    });\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected.');\n    }\n  }\n\n  handleNftChange(e) {\n    this.setState({\n      nftAuction: e.target.value\n    });\n  }\n\n  handleAuctionPrice(e) {\n    this.setState({\n      auctionPrice: e.target.value\n    });\n  }\n\n  handleDayAuction(e) {\n    this.setState({\n      auctionDays: e.target.value\n    });\n  }\n\n  handleHoursAuction(e) {\n    this.setState({\n      auctionHours: e.target.value\n    });\n  }\n\n  handleMinutesAuction(e) {\n    this.setState({\n      auctionMinutes: e.target.value\n    });\n  }\n\n  handleAuctionForm(e) {\n    e.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        address: this.state.userAccount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: this.state.metadata.map(nft => /*#__PURE__*/_jsxDEV(Nft, {\n          name: nft.name,\n          description: nft.description,\n          image: nft.image\n        }, nft.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Auction, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \" ONGOING AUCTION \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default NftMarket;","map":{"version":3,"sources":["/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/src/NftMarket.js"],"names":["React","Component","BrowserRouter","Router","Route","Switch","Link","Redirect","PropTypes","Web3","ChainlinkElf","ChainlinkOrc","ChainlinkKnight","Navbar","Nft","Auction","NftMarket","constructor","props","state","nftAuction","auctionPrice","auctionDays","auctionHours","auctionMinutes","userAccount","metadata","loading","componentDidMount","loadWeb3","loadBlockchainData","web3","window","networkId","eth","net","getId","console","log","address","localStorage","getItem","setState","account1","account2","account3","superman","SupermanErc721","networks","hulk","HulkErc721","deadpool","DeadpoolErc721","chainlinkknight","cle","Contract","abi","clo","chainlinkorc","clk","cleURI","methods","tokenURI","call","cloURI","clkURI","cleResponse","fetch","cloResponse","clkResponse","ok","Error","response","statusText","cleJson","json","push","id","name","description","image","cloJson","clkJson","lastIndex","alert","ethereum","enable","currentProvider","handleNftChange","e","target","value","handleAuctionPrice","handleDayAuction","handleHoursAuction","handleMinutesAuction","handleAuctionForm","preventDefault","render","map","nft"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom'\nimport { PropTypes } from 'react'\nimport Web3 from 'web3'\nimport ChainlinkElf from \"./abis/ChainlinkElf.json\"\nimport ChainlinkOrc from \"./abis/ChainlinkOrc.json\"\nimport ChainlinkKnight from \"./abis/ChainlinkKnight.json\"\nimport Navbar from \"./Navbar\"\nimport Nft from \"./components/Nft\"\nimport Auction from \"./Auction\"\n\nclass NftMarket extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      nftAuction:'',\n      auctionPrice:'',\n      auctionDays:'',\n      auctionHours:'',\n      auctionMinutes:'',\n      userAccount: '0x0',\n      metadata: [],\n      loading: true\n    }\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    const networkId = await web3.eth.net.getId()\n    console.log(networkId)\n\n    const address = localStorage.getItem('address');\n    this.setState({ userAccount: address });\n    console.log(this.state.userAccount)\n\n    const account1 = \"0x138cd0dF5B11Bf9dda23f04231Bb23db225C6dC3\";\n    const account2 = \"0x4E2E2c34d3118aCc809aD2388D4A551627d0c88c\";\n    const account3 = \"0xCB36091327e0150c7f4D3E5e690C04CAd1C9a768\";\n\n    // Load Nft Contracts\n\n    if (this.state.userAccount == account1) {\n      const superman = SupermanErc721.networks[networkId]\n      const hulk = HulkErc721.networks[networkId]\n      const deadpool = DeadpoolErc721.networks[networkId]\n\n      if (superman && hulk && chainlinkknight) {\n\n        const cle = new web3.eth.Contract(ChainlinkElf.abi, superman.address)\n        const clo = new web3.eth.Contract(ChainlinkOrc.abi, chainlinkorc.address)\n        const clk = new web3.eth.Contract(ChainlinkKnight.abi, chainlinkknight.address)\n\n        let cleURI = await cle.methods.tokenURI(1).call()\n        let cloURI = await clo.methods.tokenURI(1).call()\n        let clkURI = await clk.methods.tokenURI(1).call()\n\n        const cleResponse = await fetch(cleURI);\n        const cloResponse = await fetch(cloURI);\n        const clkResponse = await fetch(clkURI);\n\n        if (!cleResponse.ok && !cloResponse.ok && !clkResponse.ok)\n          throw new Error(response.statusText);\n\n        const cleJson = await cleResponse.json();\n        this.state.metadata.push({ id: 0, name: cleJson.name, description: cleJson.description, image: cleJson.image });\n\n        const cloJson = await cloResponse.json();\n        this.state.metadata.push({ id: 1, name: cloJson.name, description: cloJson.description, image: cloJson.image });\n\n        const clkJson = await clkResponse.json();\n        this.state.metadata.push({ id: 2, name: clkJson.name, description: clkJson.description, image: clkJson.image });\n\n        console.log(this.state.metadata.lastIndex);\n\n      } else {\n        window.alert('Nft contracts not deployed to detected network')\n      }\n\n    } else if (this.state.userAccount == account2) {\n\n    } else if (this.state.userAccount == account3) {\n\n    }\n\n    this.setState({ loading: false })\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected.')\n    }\n  }\n\n  handleNftChange(e){\n    this.setState({ nftAuction:e.target.value });\n  }\n\n  handleAuctionPrice(e){\n    this.setState({ auctionPrice:e.target.value });\n  }\n\n  handleDayAuction(e){\n    this.setState({ auctionDays:e.target.value });\n  }\n\n  handleHoursAuction(e){\n    this.setState({ auctionHours:e.target.value });\n  }\n\n  handleMinutesAuction(e){\n    this.setState({ auctionMinutes:e.target.value });\n  }\n\n  handleAuctionForm(e){\n    e.preventDefault();\n    \n  }\n\n  render() {\n    return (\n      <>\n        < Navbar address={this.state.userAccount} />\n        <div className=\"row\">\n          {this.state.metadata.map(nft => (\n            < Nft\n              key={nft.id}\n              name={nft.name}\n              description={nft.description}\n              image={nft.image}\n            />\n          ))}\n        </div>\n        < Auction />\n        <div class=\"container\">\n          <h2> ONGOING AUCTION </h2>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default NftMarket;"]},"metadata":{},"sourceType":"module"}