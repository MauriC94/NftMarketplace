{"ast":null,"code":"(function (global, undefined) {\n  \"use strict\";\n\n  if (global.setImmediate) {\n    return;\n  }\n\n  var nextHandle = 1; // Spec says greater than zero\n\n  var tasksByHandle = {};\n  var currentlyRunningATask = false;\n  var doc = global.document;\n  var setImmediate;\n\n  function addFromSetImmediateArguments(args) {\n    tasksByHandle[nextHandle] = partiallyApplied.apply(undefined, args);\n    return nextHandle++;\n  } // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n\n\n  function partiallyApplied(handler) {\n    var args = [].slice.call(arguments, 1);\n    return function () {\n      if (typeof handler === \"function\") {\n        handler.apply(undefined, args);\n      } else {\n        new Function(\"\" + handler)();\n      }\n    };\n  }\n\n  function runIfPresent(handle) {\n    // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // \"too much recursion\" error.\n      setTimeout(partiallyApplied(runIfPresent, handle), 0);\n    } else {\n      var task = tasksByHandle[handle];\n\n      if (task) {\n        currentlyRunningATask = true;\n\n        try {\n          task();\n        } finally {\n          clearImmediate(handle);\n          currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  function clearImmediate(handle) {\n    delete tasksByHandle[handle];\n  }\n\n  function installNextTickImplementation() {\n    setImmediate = function () {\n      var handle = addFromSetImmediateArguments(arguments);\n      process.nextTick(partiallyApplied(runIfPresent, handle));\n      return handle;\n    };\n  }\n\n  function canUsePostMessage() {\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `global.postMessage` means something completely different and can't be used for this purpose.\n    if (global.postMessage && !global.importScripts) {\n      var postMessageIsAsynchronous = true;\n      var oldOnMessage = global.onmessage;\n\n      global.onmessage = function () {\n        postMessageIsAsynchronous = false;\n      };\n\n      global.postMessage(\"\", \"*\");\n      global.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n  }\n\n  function installPostMessageImplementation() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n\n    var onGlobalMessage = function (event) {\n      if (event.source === global && typeof event.data === \"string\" && event.data.indexOf(messagePrefix) === 0) {\n        runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n\n    if (global.addEventListener) {\n      global.addEventListener(\"message\", onGlobalMessage, false);\n    } else {\n      global.attachEvent(\"onmessage\", onGlobalMessage);\n    }\n\n    setImmediate = function () {\n      var handle = addFromSetImmediateArguments(arguments);\n      global.postMessage(messagePrefix + handle, \"*\");\n      return handle;\n    };\n  }\n\n  function installMessageChannelImplementation() {\n    var channel = new MessageChannel();\n\n    channel.port1.onmessage = function (event) {\n      var handle = event.data;\n      runIfPresent(handle);\n    };\n\n    setImmediate = function () {\n      var handle = addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n  }\n\n  function installReadyStateChangeImplementation() {\n    var html = doc.documentElement;\n\n    setImmediate = function () {\n      var handle = addFromSetImmediateArguments(arguments); // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n\n      var script = doc.createElement(\"script\");\n\n      script.onreadystatechange = function () {\n        runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n\n      html.appendChild(script);\n      return handle;\n    };\n  }\n\n  function installSetTimeoutImplementation() {\n    setImmediate = function () {\n      var handle = addFromSetImmediateArguments(arguments);\n      setTimeout(partiallyApplied(runIfPresent, handle), 0);\n      return handle;\n    };\n  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n\n\n  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.\n\n  if ({}.toString.call(global.process) === \"[object process]\") {\n    // For Node.js before 0.9\n    installNextTickImplementation();\n  } else if (canUsePostMessage()) {\n    // For non-IE10 modern browsers\n    installPostMessageImplementation();\n  } else if (global.MessageChannel) {\n    // For web workers, where supported\n    installMessageChannelImplementation();\n  } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n    // For IE 6â€“8\n    installReadyStateChangeImplementation();\n  } else {\n    // For older browsers\n    installSetTimeoutImplementation();\n  }\n\n  attachTo.setImmediate = setImmediate;\n  attachTo.clearImmediate = clearImmediate;\n})(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self);","map":{"version":3,"sources":["/Users/mauriziocapone/Desktop/NftMarketplace/nft-market-app/node_modules/setimmediate/setImmediate.js"],"names":["global","undefined","setImmediate","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","addFromSetImmediateArguments","args","partiallyApplied","apply","handler","slice","call","arguments","Function","runIfPresent","handle","setTimeout","task","clearImmediate","installNextTickImplementation","process","nextTick","canUsePostMessage","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","installPostMessageImplementation","messagePrefix","Math","random","onGlobalMessage","event","source","data","indexOf","length","addEventListener","attachEvent","installMessageChannelImplementation","channel","MessageChannel","port1","port2","installReadyStateChangeImplementation","html","documentElement","script","createElement","onreadystatechange","removeChild","appendChild","installSetTimeoutImplementation","attachTo","Object","getPrototypeOf","toString","self"],"mappings":"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","sourcesContent":["(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var setImmediate;\n\n    function addFromSetImmediateArguments(args) {\n        tasksByHandle[nextHandle] = partiallyApplied.apply(undefined, args);\n        return nextHandle++;\n    }\n\n    // This function accepts the same arguments as setImmediate, but\n    // returns a function that requires no arguments.\n    function partiallyApplied(handler) {\n        var args = [].slice.call(arguments, 1);\n        return function() {\n            if (typeof handler === \"function\") {\n                handler.apply(undefined, args);\n            } else {\n                (new Function(\"\" + handler))();\n            }\n        };\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(partiallyApplied(runIfPresent, handle), 0);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    task();\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function installNextTickImplementation() {\n        setImmediate = function() {\n            var handle = addFromSetImmediateArguments(arguments);\n            process.nextTick(partiallyApplied(runIfPresent, handle));\n            return handle;\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        setImmediate = function() {\n            var handle = addFromSetImmediateArguments(arguments);\n            global.postMessage(messagePrefix + handle, \"*\");\n            return handle;\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        setImmediate = function() {\n            var handle = addFromSetImmediateArguments(arguments);\n            channel.port2.postMessage(handle);\n            return handle;\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        setImmediate = function() {\n            var handle = addFromSetImmediateArguments(arguments);\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n            return handle;\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        setImmediate = function() {\n            var handle = addFromSetImmediateArguments(arguments);\n            setTimeout(partiallyApplied(runIfPresent, handle), 0);\n            return handle;\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6â€“8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n"]},"metadata":{},"sourceType":"script"}